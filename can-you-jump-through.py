from __future__ import print_function


__author__ = 'nmarchenko'

'''
http://www.checkio.org/mission/can-you-jump-through/
'''

import pprint
import unittest

TESTS = [
    {
        "input": [
            [
                [0, 0, 5, 4, 0],
                [0, 1, 5, 0, 0],
                [0, 0, 0, 7, 2],
                [8, 0, 0, 0, 0],
                [0, 9, 0, 1, 0]
            ],
            [1, 1],
            [5, 5]
        ],
        "answer": True,
        "explanation": [
            [1, 1],
            [2, 1],
            [3, 1],
            [3, 2],
            [3, 3],
            [4, 3],
            [4, 4],
            [4, 5],
            [5, 5]
        ]
    },

    {
        "input": [
            [
                [0, 0, 5, 4, 0],
                [0, 0, 5, 0, 0],
                [0, 0, 0, 7, 2],
                [8, 0, 0, 4, 0],
                [0, 9, 0, 1, 0]
            ],
            [1, 1],
            [5, 5]
        ],
        "answer": False,
        "explanation": [
            [1, 1],
            [2, 1],
            [3, 1],
            [3, 2],
            [3, 3],
            [4, 3],
            [5, 3]
        ]
    },
    {
        "input": [
            [
                [0, 0, 5, 4, 0],
                [0, 1, 5, 0, 0],
                [0, 0, 0, 7, 2],
                [8, 0, 0, 0, 0],
                [0, 9, 0, 1, 0]
            ],
            [1, 1],
            [5, 1]
        ],
        "answer": False,
        "explanation": [
            [1, 1],
            [2, 1],
            [3, 1],
            [3, 2],
            [4, 2]
        ]
    },
    {
        "input": [
            [
                [0, 0, 8, 0, 0, 3, 5],
                [0, 8, 0, 0, 9, 0, 5],
                [8, 0, 1, 2, 0, 0, 3],
                [0, 7, 0, 0, 0, 0, 0],
                [9, 0, 1, 0, 0, 8, 0],
                [9, 0, 4, 0, 9, 0, 0],
                [3, 0, 6, 0, 0, 0, 0]
            ],
            [3, 2],
            [6, 6]
        ],
        "answer": False,
        "explanation": [
            [3, 2]
        ]
    },
    {
        "input": [
            [
                [0, 0, 8, 0, 0, 3, 5],
                [0, 8, 0, 0, 9, 0, 5],
                [8, 0, 1, 2, 0, 0, 3],
                [0, 7, 0, 0, 0, 0, 0],
                [9, 0, 1, 0, 0, 8, 0],
                [9, 0, 4, 0, 9, 0, 0],
                [3, 0, 6, 0, 0, 0, 0]
            ],
            [4, 3],
            [6, 6]
        ],
        "answer": True,
        "explanation": [
            [4, 3],
            [4, 4],
            [4, 5],
            [4, 6],
            [4, 7],
            [5, 7],
            [6, 7],
            [6, 6]
        ]
    },
    {
        "input": [
            [
                [0, 0, 5, 0, 0],
                [3, 0, 5, 0, 1],
                [3, 0, 0, 0, 2],
                [3, 0, 4, 0, 1],
                [0, 0, 4, 0, 0]
            ],
            [5, 1],
            [1, 5]
        ],
        "answer": True,
        "explanation": [
            [5, 1],
            [5, 2],
            [4, 2],
            [3, 2],
            [3, 3],
            [3, 4],
            [2, 4],
            [1, 4],
            [1, 5]
        ]
    },
    {
        "input": [
            [
                [0, 0, 0, 0, 0],
                [0, 3, 0, 3, 0],
                [0, 2, 0, 2, 0],
                [0, 0, 2, 0, 7],
                [6, 0, 0, 7, 6]
            ],
            [3, 3],
            [4, 4]
        ],
        "answer": False,
        "explanation": [
            [3, 3],
            [2, 3],
            [1, 3],
            [1, 4],
            [1, 5],
            [2, 5],
            [3, 5]
        ]
    },
    {
        "input": [
            [
                [0, 4, 0, 0, 0, 0, 0, 0, 0],
                [0, 4, 0, 1, 1, 1, 1, 2, 0],
                [0, 4, 0, 5, 0, 0, 0, 2, 0],
                [0, 4, 0, 5, 0, 7, 0, 2, 0],
                [0, 4, 0, 5, 0, 7, 0, 2, 0],
                [0, 4, 0, 5, 6, 6, 0, 2, 0],
                [0, 4, 0, 0, 0, 0, 0, 3, 0],
                [0, 4, 3, 3, 3, 3, 3, 3, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [1, 1],
            [5, 5]
        ],
        "answer": True,
        "explanation": [
            [1, 1],
            [2, 1],
            [3, 1],
            [4, 1],
            [5, 1],
            [6, 1],
            [7, 1],
            [8, 1],
            [9, 1],
            [9, 2],
            [9, 3],
            [9, 4],
            [9, 5],
            [9, 6],
            [9, 7],
            [9, 8],
            [9, 9],
            [8, 9],
            [7, 9],
            [6, 9],
            [5, 9],
            [4, 9],
            [3, 9],
            [2, 9],
            [1, 9],
            [1, 8],
            [1, 7],
            [1, 6],
            [1, 5],
            [1, 4],
            [1, 3],
            [2, 3],
            [3, 3],
            [4, 3],
            [5, 3],
            [6, 3],
            [7, 3],
            [7, 4],
            [7, 5],
            [7, 6],
            [7, 7],
            [6, 7],
            [5, 7],
            [4, 7],
            [3, 7],
            [3, 6],
            [3, 5],
            [4, 5],
            [5, 5]

        ]
    },
    {
        "input": [
            [
                [0, 4, 0, 0, 0, 0, 0, 0, 0],
                [0, 4, 0, 1, 1, 1, 1, 2, 0],
                [0, 4, 0, 5, 0, 0, 0, 2, 0],
                [0, 4, 0, 5, 9, 7, 0, 2, 0],
                [0, 4, 0, 5, 0, 7, 0, 2, 0],
                [0, 4, 0, 5, 6, 6, 0, 2, 0],
                [0, 4, 0, 0, 0, 0, 0, 3, 0],
                [0, 4, 3, 3, 3, 3, 3, 3, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [1, 1],
            [5, 5]
        ],
        "answer": False,
        "explanation": [
            [1, 1],
            [2, 1],
            [3, 1],
            [4, 1],
            [5, 1],
            [6, 1],
            [7, 1],
            [8, 1],
            [9, 1],
            [9, 2],
            [9, 3],
            [9, 4],
            [9, 5],
            [9, 6],
            [9, 7],
            [9, 8],
            [9, 9],
            [8, 9],
            [7, 9],
            [6, 9],
            [5, 9],
            [4, 9],
            [3, 9],
            [2, 9],
            [1, 9],
            [1, 8],
            [1, 7],
            [1, 6],
            [1, 5],
            [1, 4],
            [1, 3],
            [2, 3],
            [3, 3],
            [4, 3],
            [5, 3],
            [6, 3],
            [7, 3],
            [7, 4],
            [7, 5],
            [7, 6],
            [7, 7],
            [6, 7],
            [5, 7],
            [4, 7],
            [3, 7],
            [3, 6],
            [3, 5]
        ]
    },
    {
        "input": [
            [
                [0, 0, 5, 4, 0],
                [0, 1, 0, 0, 0],
                [0, 2, 0, 7, 2],
                [8, 0, 0, 0, 0],
                [0, 0, 0, 1, 0]
            ],
            [1, 5],
            [5, 1]
        ],
        "answer": True,
        "explanation": [
            [1, 5],
            [2, 5],
            [2, 4],
            [2, 3],
            [3, 3],
            [4, 3],
            [5, 3],
            [5, 2],
            [5, 1]
        ]
    },

    {
        "input": [
            [
                [0, 0, 5, 4, 0],
                [0, 0, 5, 0, 0],
                [0, 0, 0, 7, 2],
                [8, 0, 0, 4, 0],
                [0, 9, 0, 1, 0]
            ],
            [1, 5],
            [5, 1]
        ],
        "answer": False,
        "explanation": [
            [1, 5],
            [2, 5],
            [2, 4]
        ]
    },
    {
        "input": [
            [
                [0, 0, 5, 4, 0],
                [0, 1, 5, 0, 0],
                [0, 0, 0, 7, 2],
                [8, 0, 0, 0, 0],
                [0, 9, 0, 1, 0]
            ],
            [5, 1],
            [1, 5]
        ],
        "answer": False,
        "explanation": [
            [5, 1]
        ]
    },
    {
        "input": [
            [
                [0, 0, 8, 0, 0, 3, 5],
                [0, 8, 0, 0, 9, 0, 5],
                [8, 0, 1, 2, 0, 0, 3],
                [0, 7, 0, 0, 0, 0, 0],
                [9, 0, 1, 0, 0, 8, 0],
                [9, 0, 4, 0, 9, 0, 0],
                [3, 0, 6, 0, 0, 0, 0]
            ],
            [1, 2],
            [2, 6]
        ],
        "answer": False,
        "explanation": [
            [1, 2]
        ]
    },
    {
        "input": [
            [
                [0, 0, 8, 0, 0, 3, 5],
                [0, 8, 0, 0, 9, 0, 5],
                [8, 0, 1, 2, 0, 0, 3],
                [0, 7, 0, 0, 0, 0, 0],
                [9, 0, 1, 0, 0, 8, 0],
                [9, 0, 4, 0, 9, 0, 0],
                [3, 0, 6, 0, 0, 0, 0]
            ],
            [2, 1],
            [1, 2]
        ],
        "answer": True,
        "explanation": [
            [2, 1],
            [1, 1],
            [1, 2]
        ]
    },
    {
        "input": [
            [
                [0, 0, 5, 0, 0],
                [3, 0, 5, 0, 1],
                [3, 0, 0, 0, 2],
                [3, 0, 4, 0, 1],
                [0, 0, 4, 0, 0]
            ],
            [1, 1],
            [5, 5]
        ],
        "answer": True,
        "explanation": [
            [1, 1],
            [1, 2],
            [2, 2],
            [3, 2],
            [3, 3],
            [3, 4],
            [4, 4],
            [5, 4],
            [5, 5]
        ]
    },
    {
        "input": [
            [
                [0, 0, 0, 0, 0],
                [0, 3, 0, 3, 0],
                [0, 2, 0, 2, 0],
                [0, 0, 2, 0, 7],
                [6, 0, 0, 7, 6]
            ],
            [4, 1],
            [4, 4]
        ],
        "answer": False,
        "explanation": [
            [4, 1],
            [4, 2],
            [5, 2],
            [5, 3]
        ]
    },
    {
        "input": [
            [
                [0, 4, 0, 0, 0, 0, 0, 0, 0],
                [0, 4, 0, 1, 1, 1, 1, 2, 0],
                [0, 4, 0, 5, 0, 0, 0, 2, 0],
                [0, 4, 0, 5, 0, 7, 0, 2, 0],
                [0, 4, 0, 5, 0, 7, 0, 2, 0],
                [0, 4, 0, 5, 6, 6, 0, 2, 0],
                [0, 4, 0, 0, 0, 0, 0, 3, 0],
                [0, 4, 3, 3, 3, 3, 3, 3, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [5, 5],
            [7, 5]
        ],
        "answer": True,
        "explanation": [
            [5, 5],
            [4, 5],
            [3, 5],
            [3, 6],
            [3, 7],
            [4, 7],
            [5, 7],
            [6, 7],
            [7, 7],
            [7, 6],
            [7, 5]
        ]
    },
    {
        "input": [
            [
                [0, 4, 0, 0, 0, 0, 0, 0, 0],
                [0, 4, 0, 1, 1, 1, 1, 2, 0],
                [0, 4, 0, 5, 0, 0, 0, 2, 0],
                [0, 4, 0, 5, 9, 7, 0, 2, 0],
                [0, 4, 0, 5, 0, 7, 0, 2, 0],
                [0, 4, 0, 5, 6, 6, 0, 2, 0],
                [0, 4, 0, 0, 0, 0, 0, 3, 0],
                [0, 4, 3, 3, 3, 3, 3, 3, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0]
            ],
            [3, 5],
            [5, 5]
        ],
        "answer": False,
        "explanation": [
            [3, 5]
        ]
    }

]


class TestMeta(type):
    @staticmethod
    def create_test(test):
        def do_test_expected(self):
            self.assertEqual(test['answer'], checkio(test['input']), msg=pprint.pformat(test['input']))

        return do_test_expected

    def __new__(mcs, name, bases, attrs):
        obj = super(TestMeta, mcs).__new__(mcs, name, bases, attrs)
        for i, test in enumerate(TESTS):
            test_method = mcs.create_test(test)
            test_method.__name__ = 'test_%02d' % i
            setattr(obj, test_method.__name__, test_method)
        return obj


class Test(unittest.TestCase):
    __metaclass__ = TestMeta


def checkio(data):
    plan, start_point, end_point = data
    size = len(plan)
    line = range(0, size*size)

    def shift(point):
        return line[(point[0]-1)*size + point[1]-1]

    for x, row in enumerate(plan):
        for y, v in enumerate(row):
            if v:
                continue
            n = [(x + 1, y), (x, y + 1), (x - 1, y), (x, y - 1)]
            n = [(xx, yy) for xx, yy in n if all([xx >= 0, yy >= 0, xx < size, yy < size]) and plan[xx][yy] == 0]
            for neighbour in n:
                pid = line[x*size + y]
                for i, value in enumerate(line):
                    if value == pid:
                        line[i] = line[neighbour[0]*size + neighbour[1]]

    return shift(start_point) == shift(end_point)
